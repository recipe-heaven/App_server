version: '3.8'

x-DbLoggin:
  environment:
    &postgres-login
    POSTGRES_PASSWORD: '${POSTGRES_MASTER_PASSWORD}'

    USER_USERNAME: '${POSTGRES_USER_USERNAME}'
    USER_DB_NAME: '${POSTGRES_USER_DB}'
    USER_PASSWORD: '${POSTGRES_USER_PASSWORD}'
    POSTGRES_PORT: '${POSTGRES_PORT}'
    SQLURL: 'jdbc:postgresql://${POSTGRES_IP}:5432/${POSTGRES_USER_DB}'
  networks:
    &postgres-ip
    ipv4_address: '${POSTGRES_IP}'

services:
  postgres_db:
    image: postgres

    environment:
      <<: *postgres-login
      PGDATA: '/var/lib/postgresql/data/pgdata'

    networks:
      local_network: *postgres-ip

    volumes:
      - type: volume
        source: postgres_db
        target: /var/lib/postgresql/data

      - type: bind
        source: ./docker_files/db_init
        target: /docker-entrypoint-initdb.d

    restart: unless-stopped

#  war_builder:
#    build:
#      dockerfile: ./build.Dockerfile
#      context: ./
#
#
#    environment:
#      <<: *postgres-login
#
#
#    volumes:
#      - type: volume
#        source: war_volume
#        target: /runable
#      - type: volume
#        source: mvn_install
#        target: /root/.m2


  app_server:
    build:
      dockerfile: ./build.Dockerfile
      #dockerfile: ./Dockerfile
      context: ./


    environment:
      <<: *postgres-login


    volumes:
      - type: volume
        source: app_images
        target: /images
      - type: bind
        source: ./
        target: /build_dir
      - type: bind
        source: ./docker_files/maven_files
        target: /root/.m2


    networks:
      local_network:
        ipv4_address: '${APPSERVER_IP}'

    depends_on:
      - postgres_db

    restart: unless-stopped

  mail:
    image: namshi/smtp

    networks:
      frontend:
      local_network:

  # https://github.com/mikael2/payara-postgres-nginx/
#  nginx:
#    container_name: nginx
#
#    build:
#      context: ./docker_files/nginx_certbot
#      dockerfile: Dockerfile
#
#    volumes:
#      - type: volume
#        source: nginx_data
#        target: /etc/letsencrypt
#      - type: bind
#        source: /web/frontend
#        target: /www/fractal/
#
#    env_file:
#      - ./config_files/nginx_cerbot.env
#
#    environment:
#      DOMAIN: '${API_DOMAIN}'
#      LE_EMAIL: '${MAIL_USERNAME}'
#    logging:
#      options:
#        max-size: '50m'
#        max-file: '3'
#
#    ports:
#      - '80:80'
#      - '443:443'
#
#    networks:
#      frontend:
#      local_network:
#
#    depends_on:
#      - web_server
#
#    restart: unless-stopped

networks:
  local_network:
    external: false
    ipam:
      driver: default
      config:
        - subnet: 10.0.0.0/8

  frontend:

volumes:
  postgres_db:

  app_images:

  nginx_data:
